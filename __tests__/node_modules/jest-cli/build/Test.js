/**
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */
'use strict';




const Console = require('jest-util').Console;
const NullConsole = require('jest-util').NullConsole;

class Test {





  constructor(path, config, resolver) {
    this._path = path;
    this._config = config;
    this._resolver = resolver;}


  run() {
    const path = this._path;
    const config = this._config;
    const resolver = this._resolver;
    /* $FlowFixMe */
    const TestEnvironment = require(config.testEnvironment);
    /* $FlowFixMe */
    const TestRunner = require(config.testRunner);
    /* $FlowFixMe */
    const ModuleLoader = require(config.moduleLoader || 'jest-runtime');

    const env = new TestEnvironment(config);
    const TestConsole = config.silent ? NullConsole : Console;
    env.global.console = new TestConsole(
    config.useStderr ? process.stderr : process.stdout, 
    process.stderr);

    const runtime = new ModuleLoader(config, env, resolver);
    const start = Date.now();
    return TestRunner(config, env, runtime, path).
    then(result => {
      result.perfStats = { start, end: Date.now() };
      result.testFilePath = path;
      result.coverage = runtime.getAllCoverageInfo();
      return result;}).

    then(
    result => Promise.resolve().then(() => {
      env.dispose();
      if (config.logHeapUsage) {
        if (global.gc) {
          global.gc();}

        result.memoryUsage = process.memoryUsage().heapUsed;}

      return result;}), 

    err => Promise.resolve().then(() => {
      env.dispose();
      throw err;}));}}






module.exports = Test;